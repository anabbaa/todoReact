{"version":3,"sources":["components/Header.js","components/Footer.js","components/List.js","components/Todo.js","App.js","index.js"],"names":["Header","className","Footer","year","Date","getFullYear","List","props","useState","userInput","setUserInput","editable","onSubmit","e","id","updatedTodo","preventDefault","list","map","toDo","title","setEditable","name","type","placeholder","value","onChange","setUpdatedTodo","currentTodo","target","onClick","length","setList","prevState","uuidv4","trim","done","Todo","colorgen","colors","colorCode","i","Math","floor","random","userTodos","style","color","defaultChecked","check","console","log","remove","edit","App","setCurrentTodo","Fragment","todo","itemToRemove","newArr","filter","item","itemToCheck","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8af5cbe4.chunk.js","sourcesContent":["const Header = () => {\n    return (\n      <div className=\"h1Father\">\n        <h1>What you are Planning ToDo today</h1>\n      </div>\n    );\n  };\n  \n  export default Header;","const Footer = () => {\n    let year = new Date().getFullYear();\n    return (\n      <div className=\"footer\">\n        <h4>Copyrights Â®{year} </h4>\n      </div>\n    );\n  };\n  \n  export default Footer;","import { useState} from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nconst List = (props) => {\n  const [userInput, setUserInput] = useState(\"\");\n  \n  function changeHandle(e) {\n    setUserInput(e.target.value);\n  }\n  function submitHandle(e) {\n    e.preventDefault();\n    // prevState holds on the value of state before any update on the state\n  \n    if (userInput.length) {//input.length inorder to dont have array for emty input when its 0 its false\n  props.setList((prevState)=>\n  [...prevState,{id: uuidv4(), title: userInput.trim(),  done: false\n  },]);\n        //another way to add id is to userinput.length but its not perfect delet and add it will add number \n        //2 twtimes and we will not deletid it transform for another place    \n      setUserInput(\"\");\n    }\n  }\n// this function to hold the state of edit button\nfunction handleEditInputChange(e) {\n  props.setUpdatedTodo({...props.currentTodo,title: e.target.value});\n\n}\nfunction handleUpdateTodo(id, updatedTodo){\n  // here we are mapping over the todos array - the idea is check if the todo.id matches the id we pass into the function\n  // if the id's match, use the second parameter to pass in the updated todo object\n  // otherwise just use old todo\n   const updateditem = props.list.map((toDo) => {\n    return toDo.id === id ? updatedTodo : toDo.title;\n  });\n  props.setEditable(false);\n  // set editing to false because this function will be used inside a onSubmit function - which means the data was submited and we are no longer editing\n  // setIsEditing(false);\n  // update the todos state with the updated todo\n}\n  function handleEditFormSubmit(e) {\n      e.preventDefault();\n      handleUpdateTodo(props.updatedTodo.id ,props.updatedTodo)\n      }\n      \n\n  return(\n    <div>\n      {props.editable? (\n        <div>      \n        <form className=\"formMain\" onSubmit={handleEditFormSubmit}>\n          {/* we've added an h2 element */}\n          {/* also added a label for the input */}\n          {/* notice that the value for the update input is set to the currentTodo state */}\n          {/* also notice the handleEditInputChange is being used */}\n          <input\n          className=\"textedit\"\n            name=\"editTodo\"\n            type=\"text\"\n            placeholder=\"Edit\"\n            value={props.updatedTodo.title}\n            onChange={handleEditInputChange}\n          />\n          {/* here we added an \"update\" button element - use the type=\"submit\" on the button which will still submit the form when clicked using the handleEditFormSubmit function */}\n          <input className=\"add\" type=\"submit\" value=\"Update\"/>\n          {/* here we added a \"Cancel\" button to set isEditing state back to false which will cancel editing mode */}\n          <input className=\"cancel\" onClick={() => props.setEditable(false)} value=\"Cancel\" />\n        </form>\n        </div>  \n      ):\n    (<form className=\"formMain\" onSubmit={submitHandle}>\n      <input className=\"text\" type=\"text\" placeholder=\"write here your list\"\n       value={userInput} onChange={changeHandle} />\n      <input className=\"add\" type=\"submit\" value=\"Add\"/>\n    </form>)\n}\n  \n    </div>\n  );\n};\nexport default List;","import React, {useState, useEffect} from \"react\";\nconst Todo = (props) => {\n\n  const colorgen = ()=>{\n    let colors = \"#\";\n    let colorCode = \"0123456789abcdef\";\n    for (let i =1; i <= 6; i++){\n      colors += colorCode[Math.floor(Math.random() * colorCode.length)];\n    }\n    return colors;\n  };\n\n  \n\n\n\n  \n    // here we are mapping over the todos array - the idea is check if the todo.id matches the id we pass into the function\n    // if the id's match, use the second parameter to pass in the updated todo object\n    // otherwise just use old todo\n    \n    // set editing to false because this function will be used inside a onSubmit function - which means the data was submited and we are no longer editing\n    // props.setEditable(false);\n    // update the todos state with the updated todo\n    \n  \n  const userTodos = props.list.map((toDo, i ) => (\n  \n    <li style={\n      i ={\n        color:colorgen()\n      }\n    } key={i} >\n      \n      <input\n        type=\"checkbox\"\n        defaultChecked={toDo.done}\n        onChange={() => props.check(toDo.id)}\n//to check or not\n// call function from parent send values to parent\n//here i pass to the parent id which users click on when the user click the function will be created\n//or remove bd id\n      />\n      {/* {toDo.title} */}\n      {/* {contextObject.store.updateditem.title} */}\n      \n    \n      {toDo.id === props.updatedTodo.id? props.updatedTodo.title: toDo.title} \n      \n      <button className=\"Icon\"\n        onClick={() => {\n          console.log(toDo.id);\n          props.remove(toDo.id);\n        }}\n      >\n        Delete\n      </button>\n      <button className=\"IconEdit\"\n        onClick={()=>{\n        props.edit(toDo)\n        }}\n      >\n        Edit\n      </button>\n      \n    \n    </li>\n     \n  ));\n  return <ul>{userTodos}</ul>;\n};\n\nexport default Todo;","import React, { useState} from \"react\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport List from \"./components/List\";\nimport Todo from \"./components/Todo\";\nfunction App() {\n  const [list, setList] = useState([]);\n  const [currentTodo, setCurrentTodo] = useState([]);\n  const [updatedTodo, setUpdatedTodo] = useState(\"\");\n  const [editable , setEditable] = useState(false);\n\n\n  //we create state here we update in list and manipulate in todo\n  const remove = (itemToRemove) => {\n    // itemToRemove has the id for that specific item\n    const newArr = list.filter((item) => item.id !== itemToRemove);\n    // send all items unless who has the same id with itemtoremov id user which click on\n    setList(newArr);\n  };\n  const check = (itemToCheck) => {\n    // itemToCheck has the id for that specific item\n    setList((prevState) => {\n      return prevState.filter((item) => {\n        if (item.id === itemToCheck) item.done = !item.done;\n        return item;\n      });\n    });\n  };\n\n    // function to handle when the \"Edit\" button is clicked\n\n  \n    const  edit = (todo)=> {\n      console.log(todo);\n      // set editing to true\n      setEditable(true);\n      // set the currentTodo to the todo item that was clicked\n      setCurrentTodo({...todo})\n    }\n  console.log(currentTodo);\n  \n\n  return (\n    <React.Fragment>\n      <Header />\n      \n       {/* <CurrentTodo list={list}  setUpdatedTodo={setUpdatedTodo} updatedTodo={updatedTodo}editable={editable} setEditable={setEditable} currentTodo={currentTodo}  setCurrentTodo ={setCurrentTodo}/>: */}\n        \n        <List  editable={editable} setEditable={setEditable}    list={list} setList={setList} \n        updatedTodo={updatedTodo} setUpdatedTodo={setUpdatedTodo} currentTodo={currentTodo} setCurrentTodo={setCurrentTodo}  />\n      \n\n      \n      \n      <Todo edit={edit} editable={editable}  list={list}   remove={remove}check={check} updatedTodo={updatedTodo}  />\n      <Footer />\n      </React.Fragment>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport \"./sass/main.scss\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}