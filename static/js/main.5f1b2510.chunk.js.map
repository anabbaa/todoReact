{"version":3,"sources":["components/Header.js","components/Footer.js","components/List.js","components/Todo.js","App.js","index.js"],"names":["Header","Footer","year","Date","getFullYear","List","props","useState","userInput","setUserInput","onSubmit","e","preventDefault","length","setList","prevState","id","uuidv4","title","trim","done","className","type","placeholder","value","onChange","target","Todo","userTodos","list","map","toDo","i","defaultChecked","check","onClick","console","log","remove","App","Fragment","itemToRemove","newArr","filter","item","itemToCheck","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KAQiBA,EARF,WACX,OACE,8BACE,qECMSC,EATF,WACX,IAAIC,GAAO,IAAIC,MAAOC,cACtB,OACE,8BACE,iDAAiBF,EAAjB,U,eC6BOG,EA/BF,SAACC,GAEZ,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAqBA,OACE,uBAAMC,SAjBR,SAAsBC,GACpBA,EAAEC,iBAGEJ,EAAUK,SAChBP,EAAMQ,SAAQ,SAACC,GAAD,4BACVA,GADU,CACA,CAACC,GAAIC,cAAUC,MAAOV,EAAUW,OAAQC,MAAM,QAOxDX,EAAa,MAIf,UACE,uBAAOY,UAAU,OAAOC,KAAK,OAAOC,YAAY,uBAAuBC,MAAOhB,EAAWiB,SAtB7F,SAAsBd,GAEpBF,EAAaE,EAAEe,OAAOF,UAqBpB,uBAAOH,UAAU,MAAMC,KAAK,SAASE,MAAM,YCD5BG,EA3BR,SAACrB,GACN,IAAMsB,EAAYtB,EAAMuB,KAAKC,KAAI,SAACC,EAAMC,GAAP,OAC/B,qBAAYX,UAAU,OAAtB,UACE,uBACEC,KAAK,WACLW,eAAgBF,EAAKX,KACrBK,SAAU,kBAAMnB,EAAM4B,MAAMH,EAAKf,OAOlCe,EAAKb,MACN,mBAAGG,UAAU,OACXc,QAAS,WACPC,QAAQC,IAAIN,EAAKf,IACjBV,EAAMgC,OAAOP,EAAKf,KAHtB,4BAZOgB,MAsBX,OAAO,6BAAKJ,KCWLW,MA9Bf,WACE,MAAwBhC,mBAAS,IAAjC,mBAAOsB,EAAP,KAAaf,EAAb,KAmBA,OACE,eAAC,IAAM0B,SAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAM1B,QAASA,IACf,cAAC,EAAD,CAAMe,KAAMA,EAAMS,OArBP,SAACG,GAEd,IAAMC,EAASb,EAAKc,QAAO,SAACC,GAAD,OAAUA,EAAK5B,KAAOyB,KAEjD3B,EAAQ4B,IAiB4BR,MAdxB,SAACW,GAEb/B,GAAQ,SAACC,GACP,OAAOA,EAAU4B,QAAO,SAACC,GAEvB,OADIA,EAAK5B,KAAO6B,IAAaD,EAAKxB,MAAQwB,EAAKxB,MACxCwB,WAUT,cAAC,EAAD,Q,MCxBNE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5f1b2510.chunk.js","sourcesContent":["const Header = () => {\n    return (\n      <div>\n        <h1>What you are Planning ToDo today</h1>\n      </div>\n    );\n  };\n  \n  export default Header;","const Footer = () => {\n    let year = new Date().getFullYear();\n    return (\n      <div>\n        <h4>Copyrights Â®{year} </h4>\n      </div>\n    );\n  };\n  \n  export default Footer;","import { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nconst List = (props) => {\n  \n  const [userInput, setUserInput] = useState(\"\");\n  function changeHandle(e) {\n    \n    setUserInput(e.target.value);\n  }\n  function submitHandle(e) {\n    e.preventDefault();\n    // prevState holds on the value of state before any update on the state\n    //console.log(uuidv4());\n    if (userInput.length) {//input.length inorder to dont have array for emty input when its 0 its false\n  props.setList((prevState)=>\n  [...prevState,{id: uuidv4(), title: userInput.trim(), done: false\n\n  },]);\n\n        //another way to add id is to userinput.length but its not perfect delet and add it will add number \n        //2 twtimes and we will not deletid it transform for another place\n    \n      setUserInput(\"\");\n    }\n  }\n  return (\n    <form onSubmit={submitHandle}>\n      <input className=\"text\" type=\"text\" placeholder=\"write here your list\" value={userInput} onChange={changeHandle} />\n      <input className=\"add\" type=\"submit\" value=\"Add\" />\n    </form>\n  );\n};\n\nexport default List;\n\n","const Todo = (props) => {\n        const userTodos = props.list.map((toDo, i) => (\n          <li key={i} className=\"todo\">\n            <input\n              type=\"checkbox\"\n              defaultChecked={toDo.done}\n              onChange={() => props.check(toDo.id)}\n\n//to check or not\n// call function from parent send values to parent\n//here i pass to the parent id which users click on when the user click the function will be created\n//or remove bd id\n            />\n            {toDo.title}\n            <i className=\"Icon\"\n              onClick={() => {\n                console.log(toDo.id);\n                props.remove(toDo.id);\n              }}\n            >\n              ðŸ—‘\n            </i>\n          </li>\n        ));\n        return <ul>{userTodos}</ul>;\n      };\n      \n      export default Todo;","import React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport List from \"./components/List\";\nimport Todo from \"./components/Todo\";\nfunction App() {\n  const [list, setList] = useState([]);\n  //we create state here we update in list and manipulate in todo\n  const remove = (itemToRemove) => {\n    // itemToRemove has the id for that specific item\n    const newArr = list.filter((item) => item.id !== itemToRemove);\n    // send all items unless who has the same id with itemtoremov id user which click on\n    setList(newArr);\n  };\n\n  const check = (itemToCheck) => {\n    // itemToCheck has the id for that specific item\n    setList((prevState) => {\n      return prevState.filter((item) => {\n        if (item.id === itemToCheck) item.done = !item.done;\n        return item;\n      });\n    });\n  };\n  // React Fragments allow you to wrap multiple elements without adding an extra node to the DOM. This can be useful when rendering multiple child elements/components in a single parent component.\n  return (\n    <React.Fragment>\n      <Header />\n      <List setList={setList} />\n      <Todo list={list} remove={remove} check={check} />\n      <Footer />\n    </React.Fragment>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport \"./sass/main.scss\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}